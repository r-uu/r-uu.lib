package de.ruu.lib.fx.control.buttons;

import de.ruu.lib.cdi.common.CDIUtil;
import de.ruu.lib.fx.comp.FXCApp.FXStageShowingEvent;
import de.ruu.lib.fx.comp.FXCApp.FXStageShowingEvent.FXStageShowingEventDispatcher;
import de.ruu.lib.fx.comp.FXCAppRunner;
import de.ruu.lib.fx.comp.FXCAppStartedEvent;
import de.ruu.lib.fx.control.buttons.EditService.EditComponentReadyEvent;
import de.ruu.lib.fx.control.buttons.EditService.EditComponentReadyEvent.EditComponentReadyEventDispatcher;
import javafx.stage.Stage;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import java.util.function.Consumer;

/**
 * Java FX Component Application Runner {@link EditAppRunner}
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCAppRunner} at 2025.07.15 08:12:49:343
 */
@Slf4j class EditAppRunner extends FXCAppRunner
{
	public static void main(String[] args)
	{
		log.debug("starting {}", EditAppRunner.class.getName());

		EditComponentReadyEvent.addReadsUnnamedModule();
		FXCAppStartedEvent     .addReadsUnnamedModule();
		FXStageShowingEvent    .addReadsUnnamedModule();

		Runnable runBeforeAppLaunch =
				() ->
				{
					log.debug("starting runBeforeAppLaunch");
					log.debug("add new consumer to stage showing event dispatcher");
					// get application scoped event dispatcher from CDI and register a consumer
					FXStageShowingEventDispatcher fxStageShowingEventDispatcher =
							CDIUtil.select(FXStageShowingEventDispatcher.class);
					fxStageShowingEventDispatcher.add(new FXStageShowingEventConsumer());
					log.debug("add new consumer to edit component ready event dispatcher");
					// get application scoped event dispatcher from CDI and register a consumer
					EditComponentReadyEventDispatcher componentReadyEventDispatcher =
							CDIUtil.select(EditComponentReadyEventDispatcher.class);
					componentReadyEventDispatcher.add(new EditComponentReadyEventConsumer());
					log.debug(
							"\n" + "-".repeat(10) +
									"registered edit component ready consumer");
					log.debug("finished runBeforeAppLaunch");
				};

		FXCAppRunner.run(EditApp.class, args, runBeforeAppLaunch);

		log.debug("finished {}", EditAppRunner.class.getName());
	}

	private static class FXStageShowingEventConsumer implements Consumer<FXStageShowingEvent>
	{
		@Override public void accept(FXStageShowingEvent e)
		{
			log.debug(
					"\n" + "-".repeat(10) +
							"received stage showing event");
			Optional<Stage> stageOptional = e.data();
			stageOptional.ifPresent
					(
							stage ->
							{
								stage.setTitle("demo for edit button");
								stage.setHeight(200);
								stage.setWidth (200);
//						stage.sizeToScene();
							}
					);
		}
	}

	private static class EditComponentReadyEventConsumer implements Consumer<EditComponentReadyEvent>
	{
		@Override public void accept(EditComponentReadyEvent e)
		{
			log.debug(
					"\n" + "-".repeat(10) +
							"received edit component ready event");
			e.service().button().setOnAction(btnClickedEvent -> log.info("edit button clicked: {}", btnClickedEvent));
		}
	}
}