package de.ruu.lib.fx.control.buttons;

import de.ruu.lib.cdi.common.CDIUtil;
import de.ruu.lib.fx.comp.FXCApp.FXStageShowingEvent;
import de.ruu.lib.fx.comp.FXCApp.FXStageShowingEvent.FXStageShowingEventDispatcher;
import de.ruu.lib.fx.comp.FXCAppRunner;
import de.ruu.lib.fx.comp.FXCAppStartedEvent;
import de.ruu.lib.fx.control.buttons.AddService.AddComponentReadyEvent;
import de.ruu.lib.fx.control.buttons.AddService.AddComponentReadyEvent.AddComponentReadyEventDispatcher;
import javafx.stage.Stage;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import java.util.function.Consumer;

/**
 * Java FX Component Application Runner {@link AddAppRunner}
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCAppRunner} at 2025.06.28 10:24:41:774
 */
@Slf4j class AddAppRunner extends FXCAppRunner
{
	public static void main(String[] args)
	{
		log.debug("starting AddAppRunner.class.getName()");

		// register the AddServiceReadyEvent and FXCAppStartedEvent to read from the unnamed module
		AddComponentReadyEvent.addReadsUnnamedModule();
		FXCAppStartedEvent    .addReadsUnnamedModule();
		FXStageShowingEvent   .addReadsUnnamedModule();

		Runnable runBeforeAppLaunch =
				() ->
				{
					log.debug("starting runBeforeAppLaunch");
					log.debug("add new consumer to stage showing event dispatcher");
					// get application scoped event dispatcher from CDI and register a consumer
					FXStageShowingEventDispatcher fxStageShowingEventDispatcher =
							CDIUtil.select(FXStageShowingEventDispatcher.class);
					fxStageShowingEventDispatcher.add(new FXStageShowingEventConsumer());
					log.debug("add new consumer to add component ready event dispatcher");
					// get application scoped event dispatcher from CDI and register a consumer
					AddComponentReadyEventDispatcher componentReadyEventDispatcher =
							CDIUtil.select(AddComponentReadyEventDispatcher.class);
					componentReadyEventDispatcher.add(new AddComponentReadyEventConsumer());
					log.debug(
							"\n" + "-".repeat(10) +
							"registered add component ready consumer");
					log.debug("finished runBeforeAppLaunch");
				};
		FXCAppRunner.run(AddApp.class, args, runBeforeAppLaunch);

		log.debug("finished AddAppRunner.class.getName()");
	}

	private static class FXStageShowingEventConsumer implements Consumer<FXStageShowingEvent>
	{
		@Override public void accept(FXStageShowingEvent e)
		{
			log.debug(
					"\n" + "-".repeat(10) +
							"received stage showing event");
			Optional<Stage> stageOptional = e.data();
			stageOptional.ifPresent
			(
					stage ->
					{
						stage.setTitle("demo for add button");
						stage.setHeight(200);
						stage.setWidth (200);
//						stage.sizeToScene();
					}
			);
		}
	}

	private static class AddComponentReadyEventConsumer implements Consumer<AddComponentReadyEvent>
	{
		@Override public void accept(AddComponentReadyEvent e)
		{
			log.debug(
					"\n" + "-".repeat(10) +
					"received add component ready event");
			e.service().button().setOnAction(btnClickedEvent -> log.info("add button clicked: {}", btnClickedEvent));
		}
	}
}