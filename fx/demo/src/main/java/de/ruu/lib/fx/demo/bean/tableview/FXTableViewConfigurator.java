package de.ruu.lib.fx.demo.bean.tableview;

import java.math.BigDecimal;

import de.ruu.lib.fx.demo.bean.FXBean;
import de.ruu.lib.gen.java.fx.tableview.GeneratorFXTableViewConfigurator;
import javafx.geometry.Pos;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.TextFieldTableCell;

/**
 * FXTableViewConfigurator {@link FXTableViewConfigurator}
 * <p>
 * generated by {@link GeneratorFXTableViewConfigurator} at 2024.05.21 00:34:07:089
 */
public abstract class FXTableViewConfigurator
{
	public static void configure(TableView<FXBean> tableView)
	{
		tableView.getColumns().add(createColumnAnInteger());
		tableView.getColumns().add(createColumnABigDecimal());
		tableView.getColumns().add(createColumnABoolean());
		tableView.getColumns().add(createColumnAString());
	}
	
	private static TableColumn<FXBean, Number> createColumnAnInteger()
	{
		TableColumn<FXBean, Number> result = new TableColumn<>("anInteger");
		result.setCellValueFactory(data -> data.getValue().anInteger());
		result.setCellFactory(
		tableColumn -> 
		{
		  TextFieldTableCell<FXBean, Number> cell = new TextFieldTableCell<>();
		  cell.setAlignment(Pos.CENTER_RIGHT);
		  return cell;
		});
		return result;
	}
	
	private static TableColumn<FXBean, BigDecimal> createColumnABigDecimal()
	{
		TableColumn<FXBean, BigDecimal> result = new TableColumn<>("aBigDecimal");
		result.setCellValueFactory(data -> data.getValue().aBigDecimal());
		result.setCellFactory(
		tableColumn -> 
		{
		  TextFieldTableCell<FXBean, BigDecimal> cell = new TextFieldTableCell<>();
		  cell.setAlignment(Pos.CENTER_RIGHT);
		  return cell;
		});
		return result;
	}
	
	private static TableColumn<FXBean, Boolean> createColumnABoolean()
	{
		TableColumn<FXBean, Boolean> result = new TableColumn<>("aBoolean");
		result.setCellValueFactory(data -> data.getValue().aBoolean());
		result.setCellFactory(tableColumn -> new CheckBoxTableCell<>());
		return result;
	}
	
	private static TableColumn<FXBean, String> createColumnAString()
	{
		TableColumn<FXBean, String> result = new TableColumn<>("aString");
		result.setCellValueFactory(data -> data.getValue().aString());
		result.setCellFactory(TextFieldTableCell.forTableColumn());
		return result;
	}
}