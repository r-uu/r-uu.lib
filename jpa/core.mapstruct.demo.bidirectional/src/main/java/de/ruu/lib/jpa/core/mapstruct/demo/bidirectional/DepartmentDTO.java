package de.ruu.lib.jpa.core.mapstruct.demo.bidirectional;

import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
import de.ruu.lib.util.Strings;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;
import static lombok.AccessLevel.NONE;
import static lombok.AccessLevel.PROTECTED;

@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code
                          // @Getter(AccessLevel.NONE}))
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
@RequiredArgsConstructor
@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
public class DepartmentDTO extends AbstractMappedDTO<DepartmentEntity>
{
	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@NonNull
	@Setter(NONE)
	private String name;

	/** mutable */
	@Setter
	private String description;

	/** no direct access to nullable modifiable set */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(NONE)
	private Set<EmployeeDTO> employees;

	@Override public void beforeMapping(@NonNull DepartmentEntity input)
	{
		if (input.optionalEmployees().isPresent())
				input.optionalEmployees().get().forEach(e -> add(e.toTarget()));
		name(input.name());
	}

	@Override public void afterMapping(@NonNull DepartmentEntity input)
	{
		log.debug("after mapping starting");
		log.debug("after mapping finished");
	}

	@Override public @NonNull DepartmentEntity toSource() { return Mapper.INSTANCE.map(this); }

	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
//	public @NonNull String getName()        { return name(); }
	public String getDescription()                   { return description(); }
	public void   setDescription(String description) {   this.description = description; }

	// not generated by lombok because of extra parameter validation
	public @NonNull DepartmentDTO name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	/** return optional unmodifiable */
	public Optional<Set<EmployeeDTO>> optionalEmployees()
	{
		if (isNull(employees)) return Optional.empty();
		return Optional.of(Set.copyOf(employees));
	}

	@Override public Long getId() { return super.getId(); }

	public boolean add(@NonNull EmployeeDTO employee)
	{
		if (employee.department() == this)
		{
			if (employeesContains(employee)) return true;
			return nonNullEmployees().add(employee);
		}
		else
		{
			// following check should never return true
			if (employeesContains(employee))
				log.error("employee with {} is already contained in {}", employee.department(), this);

			// assign this department as department of employee and update employees
			employee.department(this);
			return nonNullEmployees().add(employee);
		}
	}

	public boolean remove(@NonNull EmployeeDTO employee)
	{
		if (isNull(employees)) return false;
		return employees.remove(employee);
	}

	private Set<EmployeeDTO> nonNullEmployees()
	{
		if (isNull(employees)) employees = new HashSet<>();
		return employees;
	}

	private boolean employeesContains(EmployeeDTO employee)
	{
		if (isNull(employees)) return false;
		return employees.contains(employee);
	}
}