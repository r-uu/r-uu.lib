package de.ruu.lib.gen.java.fx.comp;

import de.ruu.lib.fx.comp.FXCAppRunner;
import de.ruu.lib.gen.GeneratorException;
import de.ruu.lib.gen.java.CompilationUnitFileWriter;
import de.ruu.lib.gen.java.context.CompilationUnitContext;
import de.ruu.lib.gen.java.element.GeneratorAnnotation;
import de.ruu.lib.gen.java.element.type.GeneratorClass;
import de.ruu.lib.util.Time;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;

import static de.ruu.lib.gen.java.GeneratorCodeBlock.codeBlokk;
import static de.ruu.lib.gen.java.Visibility.PUBLIC;
import static de.ruu.lib.gen.java.context.CompilationUnitContext.context;
import static de.ruu.lib.gen.java.doc.GeneratorJavaDoc.javaDoc;
import static de.ruu.lib.gen.java.element.GeneratorAnnotations.annotations;
import static de.ruu.lib.gen.java.element.GeneratorModifiers.modifiers;
import static de.ruu.lib.gen.java.element.GeneratorModifiersMethod.methodModifiers;
import static de.ruu.lib.gen.java.element.method.GeneratorMethod.method;
import static de.ruu.lib.gen.java.element.method.GeneratorParameter.parameter;
import static de.ruu.lib.gen.java.element.method.GeneratorParameters.parameters;
import static de.ruu.lib.gen.java.element.type.GeneratorClass.classType;
import static de.ruu.lib.gen.java.element.type.GeneratorClassExtends.extendsClause;
import static de.ruu.lib.util.Constants.LS;

public class GeneratorFXCAppRunner
{
	private String packageName;
	private String simpleFileName;
	private String appName;

	public GeneratorFXCAppRunner(
			@NonNull String packageName, @NonNull String simpleFileName, @NonNull String appName)
	{
		this.packageName    = packageName;
		this.simpleFileName = simpleFileName;
		this.appName        = appName;
	}

	public void run() throws GeneratorException, IOException
	{
		CompilationUnitContext context = context(packageName, simpleFileName);
		GeneratorClass generatorClass =
				classType(context, simpleFileName)
				.childNodesSeparator(LS)
				.javaDoc
				(
						javaDoc(context)
								.add("Java FX Component Application Runner {@link " + simpleFileName + "}")
								.add("<p>")
								.add("generated by {@code " + getClass().getName() + "} at " + Time.getSortableTimestamp())
				)
				.annotations
				(
						annotations(context)
								.add
								(
										GeneratorAnnotation.annotation(context, Slf4j.class)
								)
				)
				.extendsClause
				(
						extendsClause(context)
								.extendsClause(FXCAppRunner.class)
				)
				.codeBlock
				(
						codeBlokk(context)
								.add
								(
										method(context, "void", "main")
												.childNodesSeparator(LS)
												.modifiers
												(
														methodModifiers(context)
																.visibility(PUBLIC)
																.setStatic(true)
												)
												.parameters
												(
														parameters(context)
																.add
																(
																		parameter(context, "String[]", "args"))
												)
												.codeBlock
												(
														codeBlokk(context)
														.add
														(
																       "log.debug(\"starting " + simpleFileName + ".class.getName()\");"
																+ LS + context.importManager().useType(FXCAppRunner.class) + ".run"
																		 + "(" + context.importManager().useType(appName) + ".class, args);"
																+ LS + "log.debug(\"finished " + simpleFileName + ".class.getName()\");"
														)
												)										
								)
				)
				;
		CompilationUnitFileWriter writer =
				CompilationUnitFileWriter.writer(packageName, simpleFileName);
		writer.write(generatorClass.generate().toString());
	}
}