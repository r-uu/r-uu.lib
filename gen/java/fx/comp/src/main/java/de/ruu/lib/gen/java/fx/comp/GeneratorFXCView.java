package de.ruu.lib.gen.java.fx.comp;

import de.ruu.lib.fx.comp.DefaultFXCView;
import de.ruu.lib.gen.GeneratorException;
import de.ruu.lib.gen.java.CompilationUnitFileWriter;
import de.ruu.lib.gen.java.context.CompilationUnitContext;
import de.ruu.lib.gen.java.element.type.GeneratorClass;
import de.ruu.lib.util.Time;

import java.io.IOException;

import static de.ruu.lib.gen.java.GeneratorCodeBlock.codeBlokk;
import static de.ruu.lib.gen.java.Visibility.PUBLIC;
import static de.ruu.lib.gen.java.context.CompilationUnitContext.context;
import static de.ruu.lib.gen.java.doc.GeneratorJavaDoc.javaDoc;
import static de.ruu.lib.gen.java.element.GeneratorModifiers.modifiers;
import static de.ruu.lib.gen.java.element.type.GeneratorClass.classType;
import static de.ruu.lib.gen.java.element.type.GeneratorClassExtends.extendsClause;
import static de.ruu.lib.gen.java.element.type.GeneratorClassImplements.implementsClause;
import static de.ruu.lib.util.Constants.LS;

public class GeneratorFXCView
{
	private String packageName;
	private String simpleFileName;

	public GeneratorFXCView(String packageName, String simpleFileName)
	{
		this.packageName    = packageName;
		this.simpleFileName = simpleFileName;
	}

	public void run() throws GeneratorException, IOException
	{
		CompilationUnitContext context = context(packageName, simpleFileName);
		GeneratorClass generator =
				classType(context, simpleFileName)
				.childNodesSeparator(LS)
				.javaDoc
				(
						javaDoc(context)
								.add("Java FX Component {@link " + simpleFileName + "}")
								.add("<p>")
								.add("generated by {@code " + getClass().getName() + "} at " + Time.getSortableTimestamp())
				)
				.modifiers(modifiers(context).visibility(PUBLIC))
				.extendsClause
				(
						extendsClause(context)
								.extendsClause
								(
										context.importManager().useType(DefaultFXCView.class) // TODO provide a proper generator for generic parameters
										+ "<"
										+	  context.importManager().useType(simpleFileName               ) + ", "
										+	  context.importManager().useType(simpleFileName + "Service"   ) + ", "
										+	  context.importManager().useType(simpleFileName + "Controller")
										+ ">"
								)
				)
				.implementsClause
				(
						implementsClause(context).add(simpleFileName + "Service")
				)
				.codeBlock
				(
						codeBlokk(context)
				)
				;
		CompilationUnitFileWriter writer =
				CompilationUnitFileWriter.writer(packageName, simpleFileName);
		writer.write(generator.generate().toString());
	}
}