package de.ruu.lib.fx.comp.buttons;

import de.ruu.lib.fx.FXUtil;
import de.ruu.lib.fx.comp.DefaultFXCView;
import de.ruu.lib.fx.comp.FXCAppRunner;
import de.ruu.lib.fx.comp.FXCAppStartedEvent;
import de.ruu.lib.fx.comp.buttons.AddService.AddServiceReadyEvent;
import de.ruu.lib.fx.comp.buttons.AddService.AddServiceReadyEvent.AddServiceReadyEventDispatcher;
import jakarta.enterprise.inject.spi.CDI;
import javafx.scene.control.Button;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import java.util.function.Consumer;

/**
 * Java FX Component Application Runner {@link AddAppRunner}
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCAppRunner} at 2025.06.28 10:24:41:774
 */
@Slf4j class AddAppRunner extends FXCAppRunner
{
	public static void main(String[] args)
	{
		log.debug("starting AddAppRunner.class.getName()");

		// register the AddServiceReadyEvent and FXCAppStartedEvent to read from the unnamed module
		AddServiceReadyEvent.addReadsUnnamedModule();
		FXCAppStartedEvent  .addReadsUnnamedModule();

		Runnable runBeforeAppLaunch =
				() ->
				{
					log.debug("starting runBeforeAppLaunch");
					// register the FXCAppStartedEvent and AddServiceReadyEvent consumers to their respective dispatchers
					FXCAppStartedEvent.FXCAppStartedEventDispatcher appStartedEventDispatcher =
							CDI.current().select(FXCAppStartedEvent.FXCAppStartedEventDispatcher.class).get();
					appStartedEventDispatcher.add(new FXCAppStartedEventEventConsumer());
					AddServiceReadyEventDispatcher serviceReadyEventDispatcher =
							CDI.current().select(AddServiceReadyEventDispatcher.class).get();
					serviceReadyEventDispatcher.add(new AddServiceReadyEventConsumer());
					log.debug("finished runBeforeAppLaunch");
				};
		FXCAppRunner.run(AddApp.class, args, runBeforeAppLaunch);

		log.debug("finished AddAppRunner.class.getName()");
	}

	private static class AddServiceReadyEventConsumer implements Consumer<AddServiceReadyEvent>
	{
		@Override public void accept(AddServiceReadyEvent e)
		{
			log.debug("received event {}", e);
			AddService addService = e.getSource();
			Button     button     = addService.button();
			FXUtil
					.getStage(button)
					.ifPresentOrElse
					(
							stage ->
							{
								stage.setTitle("demo for add button");
								stage.sizeToScene();
							},
							() -> log.warn("no stage found for button {}", button)
					);
			button.setOnAction(btnClickedEvent -> log.info("add button clicked: {}", btnClickedEvent));
		}
	}

	private static class FXCAppStartedEventEventConsumer implements Consumer<FXCAppStartedEvent>
	{
		@Override public void accept(FXCAppStartedEvent e)
		{
			log.debug("received event {}", e);
			Optional<DefaultFXCView> optionalView = e.getData();
			optionalView.ifPresent
			(
					v ->
					{
						FXUtil
								.getStage(v.getLocalRoot())
								.ifPresentOrElse
								(
										stage ->
										{
											stage.setTitle("demo for add button");
											stage.sizeToScene();
										},
										() -> log.warn("no stage found for view {}", v.getLocalRoot())
								);
					}
			);
		}
	}
}